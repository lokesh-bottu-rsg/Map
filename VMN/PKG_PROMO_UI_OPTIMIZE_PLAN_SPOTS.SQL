CREATE OR REPLACE PROCEDURE PKG_PROMO_UI_OPTIMIZE_PLAN_SPOTS(
    IN_MEDIA_OUTLET_ID INT,
	IN_QTR VARCHAR(10),			-- GETTING ACTUAL QTR NAME
    IN_MODEL_TYPE INT,
	IN_MAX_NIELSEN_BCST_DATE DATE,		-- DASH MIGRATION RELATED CHANGES, WE WILL GET THE LATEST NIELSEN END DATE FROM UI IN THIS PARAMETER.
    IN_USER_ID INT
)
RETURNS VARCHAR(10)
LANGUAGE SQL AS 
DECLARE 
	V_PERIOD_ID INT;
	V_PLAN_ID INT;
    V_PLAN_VERSION_ID INT;
    V_PLAN_STATUS_S INT;
    V_MODEL_EXEC INT;
    V_MODEL_TYPE_ID INT;
	V_OPTIMIZATION_TYPE INT;
    V_CAMPAIGN_ID INT;
    V_CAMPAIGN_GOAL_ID INT;
	V_PROJECT_ID INT;
	V_EPISODE_ID INT;
BEGIN

	SELECT 
		(CASE
			WHEN :IN_MODEL_TYPE = 1 THEN 1
			WHEN :IN_MODEL_TYPE = 3 THEN 2
			ELSE :IN_MODEL_TYPE
		END) INTO :V_MODEL_TYPE_ID;

	SELECT PERIOD_ID INTO :V_PERIOD_ID FROM REF_CAL_PERIOD  WHERE NAME = :IN_QTR AND PERIOD_TYPE_CD = 'Q' LIMIT 1;
		
	SELECT PLAN_ID INTO :V_PLAN_ID FROM PR_PLAN WHERE  MEDIA_OUTLET_ID = :IN_MEDIA_OUTLET_ID AND PERIOD_ID = :V_PERIOD_ID
		AND PLAN_TYPE = :V_MODEL_TYPE_ID LIMIT 1;
		
	SELECT MAX(PLAN_VERSION_ID) INTO :V_PLAN_VERSION_ID FROM PR_PLAN_VERSION WHERE PLAN_ID = :V_PLAN_ID;
		
	SELECT  OPTIMIZATION_TYPE INTO :V_OPTIMIZATION_TYPE FROM PR_PLAN_VERSION WHERE PLAN_ID = :V_PLAN_ID AND PLAN_VERSION_ID = :V_PLAN_VERSION_ID LIMIT 1;

	INSERT INTO  MODEL_EXEC (MODEL_TYPE_ID, MEDIA_OUTLET_ID, PLAN_ID, PLAN_VERSION_ID, REQ_DT, EXEC_START_DT, EXEC_END_DT, 
		EXEC_STATUS_CD, LICENSE_ID, OPT_PROCESS_KEY,USER_ID,ACTION_TYPE )
		VALUES(:IN_MODEL_TYPE, :IN_MEDIA_OUTLET_ID, :V_PLAN_ID, :V_PLAN_VERSION_ID, CURRENT_TIMESTAMP(), NULL, NULL,'P', NULL, NULL,:IN_USER_ID,1);
		
	SELECT MAX(MODEL_EXEC_ID) INTO :V_MODEL_EXEC FROM MODEL_EXEC;
	
	UPDATE PR_PLAN_VERSION 
		SET 
			MODEL_EXEC_ID = :V_MODEL_EXEC,
			UPDATED_TS = CURRENT_TIMESTAMP()
		WHERE
			PLAN_ID = :V_PLAN_ID
				AND PLAN_VERSION_ID = :V_PLAN_VERSION_ID;
	
	--  UPDATE CAMPAIGN and CAMPAIGN_GOAL_ID FOR EDITABLE MAP PROJECTS -- 
	IF (:V_MODEL_TYPE_ID IN (1,2)) THEN 

		LET Project_ID_Cursor CURSOR FOR 
			Select PPP.PROJECT_ID,1 AS EPISODE_ID,PPP.PLAN_ID,PPP.PLAN_VERSION_ID from PR_PLAN_PROJECT PPP
					INNER JOIN MODEL_EXEC ME ON PPP.PLAN_ID = ME.PLAN_ID 
						AND PPP.PLAN_VERSION_ID = ME.PLAN_VERSION_ID 
						AND PPP.OPTIMIZE_YN = 'N'
					where ME.MODEL_EXEC_ID = :V_MODEL_EXEC AND PPP.CAMPAIGN_GOAL_ID IS NULL
                    
                    UNION
                    -- EPISODIC
                    Select PPP.PROJECT_ID,PPP.EPISODE_ID,PPP.PLAN_ID,PPP.PLAN_VERSION_ID from PR_PLAN_PROJECT_EPISODE PPP
					INNER JOIN MODEL_EXEC ME ON PPP.PLAN_ID = ME.PLAN_ID 
						AND PPP.PLAN_VERSION_ID = ME.PLAN_VERSION_ID 
						AND PPP.OPTIMIZE_YN = 'N'
					where ME.MODEL_EXEC_ID = :V_MODEL_EXEC AND PPP.CAMPAIGN_GOAL_ID IS NULL;
		

		OPEN Project_ID_Cursor;
		FOR ROW_VARIABLE IN Project_ID_Cursor DO 
		
			SET V_PROJECT_ID := ROW_VARIABLE.PROJECT_ID;
			SET V_EPISODE_ID := ROW_VARIABLE.EPISODE_ID;

			IF (:V_EPISODE_ID = 1) THEN  -- LAUNCH ONLY
				SELECT  MAX(COALESCE(PPP.CAMPAIGN_ID,0)), 
						MAX(COALESCE(PPP.CAMPAIGN_GOAL_ID,0))
						INTO :V_CAMPAIGN_ID, :V_CAMPAIGN_GOAL_ID
				FROM PR_PLAN_PROJECT PPP
				WHERE PPP.PLAN_ID = :V_PLAN_ID AND  PPP.PROJECT_ID = :V_PROJECT_ID ;

				UPDATE PR_PLAN_PROJECT SET CAMPAIGN_ID = :V_CAMPAIGN_ID , CAMPAIGN_GOAL_ID = :V_CAMPAIGN_GOAL_ID 
				WHERE PLAN_ID = :V_PLAN_ID AND PLAN_VERSION_ID = :V_PLAN_VERSION_ID AND PROJECT_ID = :V_PROJECT_ID;
				
            ELSE 		-- EPISODIC
				SELECT  MAX(COALESCE(PPP.CAMPAIGN_ID,0)), 
						MAX(COALESCE(PPP.CAMPAIGN_GOAL_ID,0))
						INTO :V_CAMPAIGN_ID, :V_CAMPAIGN_GOAL_ID
				FROM PR_PLAN_PROJECT_EPISODE PPP
				WHERE PPP.PROJECT_ID = :V_PROJECT_ID AND PPP.EPISODE_ID = :V_EPISODE_ID AND PPP.PLAN_ID = :V_PLAN_ID;

				UPDATE PR_PLAN_PROJECT_EPISODE SET CAMPAIGN_ID = :V_CAMPAIGN_ID , CAMPAIGN_GOAL_ID = :V_CAMPAIGN_GOAL_ID 
				WHERE PROJECT_ID = :V_PROJECT_ID AND EPISODE_ID = :V_EPISODE_ID AND PLAN_ID = :V_PLAN_ID AND PLAN_VERSION_ID = :V_PLAN_VERSION_ID ;

            END IF;

		END FOR;
		CLOSE Project_ID_Cursor;
	END IF;

	UPDATE PR_PLAN_PROJECT PPP
		SET STATUS_CD = 2
		WHERE EXISTS (
			SELECT 1
			FROM (
				SELECT DISTINCT PE.PROJECT_ID, PE.PLAN_ID, PE.PLAN_VERSION_ID 
				FROM PR_PLAN_PROJECT_EPISODE PE 
				WHERE PE.OPTIMIZE_YN = 'Y' 
				AND PE.PLAN_ID = :V_PLAN_ID 
				AND PE.PLAN_VERSION_ID = :V_PLAN_VERSION_ID 
				
				UNION 
				
				SELECT DISTINCT PE.PROJECT_ID, PE.PLAN_ID, PE.PLAN_VERSION_ID 
				FROM PR_PLAN_PROJECT PE 
				WHERE PE.OPTIMIZE_YN = 'Y' 
				AND PE.PLAN_ID = :V_PLAN_ID 
				AND PE.PLAN_VERSION_ID = :V_PLAN_VERSION_ID
			) PEE
			WHERE PPP.PROJECT_ID = PEE.PROJECT_ID
		)
		AND PPP.PLAN_ID = :V_PLAN_ID 
		AND PPP.PLAN_VERSION_ID = :V_PLAN_VERSION_ID;

	IF (:V_OPTIMIZATION_TYPE = 1) THEN
		
		INSERT INTO PR_MODEL_EXEC_PARAM (MODEL_EXEC_ID, PARAM_ID, VALUE) 
			VALUES (:V_MODEL_EXEC,1,3),(:V_MODEL_EXEC,2,1),(:V_MODEL_EXEC,12,0);
		
		INSERT INTO PR_MODEL_EXEC_PARAM (MODEL_EXEC_ID, PARAM_ID, VALUE) 
		SELECT :V_MODEL_EXEC, PARAM_ID, PARAM_VALUE FROM REF_MODEL_PARAM_COMPONENT P
				WHERE MEDIA_OUTLET_ID=:IN_MEDIA_OUTLET_ID and MODEL_TYPE_ID=1
		AND PARAM_ID not in (1,2,12);
		
	ELSE	
		INSERT INTO PR_MODEL_EXEC_PARAM (MODEL_EXEC_ID, PARAM_ID, VALUE) 
			VALUES (:V_MODEL_EXEC,1,2);
	
		INSERT INTO PR_MODEL_EXEC_PARAM (MODEL_EXEC_ID, PARAM_ID, VALUE) 
		SELECT :V_MODEL_EXEC, PARAM_ID, PARAM_VALUE FROM REF_MODEL_PARAM_COMPONENT P
				WHERE MEDIA_OUTLET_ID=:IN_MEDIA_OUTLET_ID and MODEL_TYPE_ID=1
			AND PARAM_ID <> 1;
	END IF;

    
	SELECT PLAN_STATUS_ID INTO :V_PLAN_STATUS_S FROM REF_PLAN_STATUS WHERE CODE = 'S' limit 1;
    UPDATE PR_PLAN SET PLAN_STATUS_ID = :V_PLAN_STATUS_S, SCHEDULE_DT = CURRENT_TIMESTAMP() WHERE PLAN_ID = :V_PLAN_ID;

	RES := (SELECT :V_MODEL_EXEC AS MODEL_EXEC_ID);
    
RETURN TABLE(RES);
END;

GRANT USAGE ON PROCEDURE PKG_PROMO_UI_OPTIMIZE_PLAN_SPOTS(INT,VARCHAR,INT,DATE,INT) TO ROLE RA_PROMO_DEV_QA_UAT_ACCESS;
GRANT USAGE ON PROCEDURE PKG_PROMO_UI_OPTIMIZE_PLAN_SPOTS(INT,VARCHAR,INT,DATE,INT) TO ROLE RA_PROMO_PROD_ACCESS;