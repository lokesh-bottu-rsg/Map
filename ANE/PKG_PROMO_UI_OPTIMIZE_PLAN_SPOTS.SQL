CREATE OR REPLACE PROCEDURE PKG_PROMO_UI_OPTIMIZE_PLAN_SPOTS(
	IN_MEDIA_OUTLET_ID INT,
	IN_QTR varchar(10),			-- GETTING ACTUAL QTR NAME
	IN_MODEL_TYPE INT,
	IN_MAX_NIELSEN_BCST_DATE DATE,		-- DASH MIGRATION RELATED CHANGES, WE WILL GET THE LATEST NIELSEN END DATE FROM UI IN THIS PARAMETER.
	IN_USER_ID INT
)
RETURNS VARCHAR(10)
LANGUAGE SQL AS 
DECLARE 
	V_PERIOD_ID INT;
    V_PLAN_ID INT;
    V_PLAN_VERSION_ID INT;
    V_PLAN_STATUS_S INT;
    V_MODEL_EXEC INT;
    V_MODEL_TYPE_ID INT;
	V_OPTIMIZATION_TYPE INT;
    V_CAMPAIGN_ID INT;
    V_CAMPAIGN_GOAL_ID INT;
    V_CABLE_NET_ID INT;
	V_NIELSEN_END_DATE DATE;
BEGIN

	SELECT 
		(CASE
			WHEN :IN_MODEL_TYPE = 1 THEN 1
			WHEN :IN_MODEL_TYPE = 3 THEN 2
			ELSE :IN_MODEL_TYPE
		END) INTO :V_MODEL_TYPE_ID;

	SELECT PERIOD_ID INTO :V_PERIOD_ID FROM REF_CAL_PERIOD  WHERE NAME = :IN_QTR AND PERIOD_TYPE_CD = 'Q' LIMIT 1;
		
	SELECT PLAN_ID INTO :V_PLAN_ID FROM PR_PLAN WHERE  MEDIA_OUTLET_ID = :IN_MEDIA_OUTLET_ID AND PERIOD_ID = :V_PERIOD_ID
		AND PLAN_TYPE = :V_MODEL_TYPE_ID LIMIT 1;
		
	SELECT MAX(PLAN_VERSION_ID) INTO :V_PLAN_VERSION_ID FROM PR_PLAN_VERSION WHERE PLAN_ID = :V_PLAN_ID;
		
	SELECT  OPTIMIZATION_TYPE INTO :V_OPTIMIZATION_TYPE FROM PR_PLAN_VERSION WHERE PLAN_ID = :V_PLAN_ID AND PLAN_VERSION_ID = :V_PLAN_VERSION_ID LIMIT 1;
    
	SELECT CABLE_NETWORK_ID INTO :V_CABLE_NET_ID FROM REF_MEDIA_OUTLET WHERE MEDIA_OUTLET_ID = :IN_MEDIA_OUTLET_ID;
   
	-- # Changes done for #4960: we will leverage the max. nielsen end date from the input parameter values sent from UI instead of calling this mysql function.
    -- SELECT GET_MAX_NIELSEN_BROADCAST_DATE (	:V_CABLE_NET_ID) INTO :V_NIELSEN_END_DATE;
    
    SET V_NIELSEN_END_DATE := (:IN_MAX_NIELSEN_BCST_DATE);

	INSERT INTO  MODEL_EXEC (
				MODEL_TYPE_ID, MEDIA_OUTLET_ID, PLAN_ID, PLAN_VERSION_ID, REQ_DT, EXEC_START_DT, EXEC_END_DT, 
				EXEC_STATUS_CD, LICENSE_ID, OPT_PROCESS_KEY,USER_ID,ACTION_TYPE
            )
		VALUES
			(
				:IN_MODEL_TYPE, :IN_MEDIA_OUTLET_ID, :V_PLAN_ID, :V_PLAN_VERSION_ID, CURRENT_TIMESTAMP(), NULL, NULL,
                'P', NULL, NULL,:IN_USER_ID,1
			);
    
	SELECT MAX(MODEL_EXEC_ID) INTO :V_MODEL_EXEC FROM MODEL_EXEC;

	UPDATE PR_PLAN_VERSION 
	SET 
		MODEL_EXEC_ID = :V_MODEL_EXEC,
		UPDATED_TS = CURRENT_TIMESTAMP()
	WHERE
		PLAN_ID = :V_PLAN_ID
			AND PLAN_VERSION_ID = :V_PLAN_VERSION_ID;

	--  ADDED LOGIC TO UPDATE NIELSEN_START_DATE AND NIELSEN_END_DATE INTO PR_PLAN_PROJECT AND PR_PLAN_PROJECT_EPISODE ##############	
    -- update same nielsen st and end date for all those projects as per the previous version of the optimization (on going projects )

	MERGE INTO PR_PLAN_PROJECT PP
		USING PR_PLAN_PROJECT PP1
		ON PP.PLAN_ID = :V_PLAN_ID
			AND PP.PLAN_ID = PP1.PLAN_ID
			AND PP.PLAN_VERSION_ID = :V_PLAN_VERSION_ID
			AND PP1.PLAN_VERSION_ID = :V_PLAN_VERSION_ID - 1
			AND PP.PROJECT_ID = PP1.PROJECT_ID
			AND PP.ON_MAP_START_DATE <= :V_NIELSEN_END_DATE
		WHEN MATCHED THEN 
			UPDATE SET 
				PP.NIELSEN_END_DATE = PP1.NIELSEN_END_DATE,
				PP.NIELSEN_START_DATE = PP1.NIELSEN_START_DATE;

	MERGE INTO PR_PLAN_PROJECT_EPISODE PP
		USING PR_PLAN_PROJECT_EPISODE PP1
		ON PP.PLAN_ID = :V_PLAN_ID
			AND PP.PLAN_ID = PP1.PLAN_ID
			AND PP.PLAN_VERSION_ID = :V_PLAN_VERSION_ID
			AND PP1.PLAN_VERSION_ID = :V_PLAN_VERSION_ID - 1
			AND PP.PROJECT_ID = PP1.PROJECT_ID
			AND PP.EPISODE_ID = PP1.EPISODE_ID
			AND PP.ON_MAP_START_DATE <= :V_NIELSEN_END_DATE
		WHEN MATCHED THEN 
			UPDATE SET 
				PP.NIELSEN_END_DATE = PP1.NIELSEN_END_DATE,
				PP.NIELSEN_START_DATE = PP1.NIELSEN_START_DATE;

	-- SETTING  nielsen st and end date as null for those cluster projects whose flight duration has been has been changed  (on going projects)
	MERGE INTO PR_PLAN_PROJECT PP
		USING PR_PLAN_PROJECT PP1
		ON PP.PLAN_ID = :V_PLAN_ID
			AND PP.PLAN_ID = PP1.PLAN_ID
			AND PP.PLAN_VERSION_ID = :V_PLAN_VERSION_ID
			AND PP1.PLAN_VERSION_ID = :V_PLAN_VERSION_ID - 1
			AND PP.PROJECT_ID = PP1.PROJECT_ID
			AND PP.ON_MAP_START_DATE <= :V_NIELSEN_END_DATE
			AND PP.CLUSTER_ID > 1
			AND PP.STATUS_CD = 11
		WHEN MATCHED THEN 
			UPDATE SET 
				PP.NIELSEN_END_DATE = CASE 
											WHEN (PP.ON_MAP_START_DATE = PP1.ON_MAP_START_DATE 
												AND PP.ON_MAP_END_DATE = PP1.ON_MAP_END_DATE) 
											THEN PP1.NIELSEN_END_DATE 
											ELSE NULL 
										END,
				PP.NIELSEN_START_DATE = CASE 
											WHEN (PP.ON_MAP_START_DATE = PP1.ON_MAP_START_DATE 
													AND PP.ON_MAP_END_DATE = PP1.ON_MAP_END_DATE) 
											THEN PP1.NIELSEN_START_DATE 
											ELSE NULL 
										END;
        
        MERGE INTO PR_PLAN_PROJECT_EPISODE PP
			USING PR_PLAN_PROJECT_EPISODE PP1
			ON PP.PLAN_ID = :V_PLAN_ID
				AND PP.PLAN_ID = PP1.PLAN_ID
				AND PP.PLAN_VERSION_ID = :V_PLAN_VERSION_ID
				AND PP1.PLAN_VERSION_ID = :V_PLAN_VERSION_ID - 1
				AND PP.PROJECT_ID = PP1.PROJECT_ID
				AND PP.EPISODE_ID = PP1.EPISODE_ID
				AND PP.ON_MAP_START_DATE <= :V_NIELSEN_END_DATE
				AND PP.CLUSTER_ID > 1
				AND PP.STATUS_CD = 11
			WHEN MATCHED THEN 
			UPDATE SET 
				PP.NIELSEN_END_DATE = CASE 
											WHEN (PP.ON_MAP_START_DATE = PP1.ON_MAP_START_DATE 
												AND PP.ON_MAP_END_DATE = PP1.ON_MAP_END_DATE) 
											THEN PP1.NIELSEN_END_DATE 
											ELSE NULL 
										END,
				PP.NIELSEN_START_DATE = CASE 
											WHEN (PP.ON_MAP_START_DATE = PP1.ON_MAP_START_DATE 
													AND PP.ON_MAP_END_DATE = PP1.ON_MAP_END_DATE) 
											THEN PP1.NIELSEN_START_DATE 
											ELSE NULL 
										END;

        
        
        -- update nielsen end date for all those project which are getting optimized firse time / future projects / projects whose flight has been updated
        -- getting data on the basis of DOW of the project end date on map and the availability of ATPV data.
		 UPDATE PR_PLAN_PROJECT PP 
         	SET PP.NIELSEN_END_DATE = CASE WHEN WEEKDAY(PP.ON_MAP_END_DATE) = WEEKDAY(:V_NIELSEN_END_DATE) THEN :V_NIELSEN_END_DATE 
										WHEN WEEKDAY(PP.ON_MAP_END_DATE) < WEEKDAY(:V_NIELSEN_END_DATE) 
											THEN DATEADD(DAY,WEEKDAY(PP.ON_MAP_END_DATE),PKG_GET_MONDAYS_DATE(:V_NIELSEN_END_DATE))
										ELSE DATEADD(DAY,WEEKDAY(PP.ON_MAP_END_DATE),DATEADD(DAY,-7,PKG_GET_MONDAYS_DATE(:V_NIELSEN_END_DATE))) END
		WHERE PP.PLAN_ID = :V_PLAN_ID AND PP.PLAN_VERSION_ID = :V_PLAN_VERSION_ID -- AND PP.OPTIMIZE_YN = 'Y' and PP.ON_MAP_START_DATE > :V_NIELSEN_END_DATE
        AND PP.NIELSEN_END_DATE IS NULL;
       
		UPDATE PR_PLAN_PROJECT_EPISODE PP 
		SET PP.NIELSEN_END_DATE = CASE WHEN WEEKDAY(PP.ON_MAP_END_DATE) = WEEKDAY(:V_NIELSEN_END_DATE) 
									THEN :V_NIELSEN_END_DATE 
									WHEN WEEKDAY(PP.ON_MAP_END_DATE) < WEEKDAY(:V_NIELSEN_END_DATE) 
									THEN DATEADD(DAY,WEEKDAY(PP.ON_MAP_END_DATE),PKG_GET_MONDAYS_DATE(:V_NIELSEN_END_DATE))
									ELSE DATEADD(DAY,WEEKDAY(PP.ON_MAP_END_DATE),DATEADD(DAY,-7,PKG_GET_MONDAYS_DATE(:V_NIELSEN_END_DATE)))
									END
		WHERE PP.PLAN_ID = :V_PLAN_ID AND PP.PLAN_VERSION_ID = :V_PLAN_VERSION_ID -- AND PP.OPTIMIZE_YN = 'Y' and PP.ON_MAP_START_DATE > :V_NIELSEN_END_DATE
		AND PP.NIELSEN_END_DATE IS NULL;


		-- update nielsen start date for all those project which are getting optimized firse time / future projects / projects whose flight has been updated
        -- on the basis of the nielsen end date updated above.

		MERGE INTO  PR_PLAN_PROJECT PP 
			USING (
				SELECT PROJECT_ID,ON_MAP_START_DATE,ON_MAP_END_DATE,DATEDIFF(DAYS,ON_MAP_START_DATE,ON_MAP_END_DATE) AS DAYS FROM PR_PLAN_PROJECT 
				WHERE PLAN_ID = :V_PLAN_ID AND PLAN_VERSION_ID = :V_PLAN_VERSION_ID -- AND OPTIMIZE_YN = 'Y'
			) PPP ON PP.PROJECT_ID  = PPP.PROJECT_ID AND PP.PLAN_ID = :V_PLAN_ID AND PP.PLAN_VERSION_ID = :V_PLAN_VERSION_ID AND PP.NIELSEN_START_DATE IS NULL
			WHEN MATCHED THEN 
				UPDATE SET PP.NIELSEN_START_DATE = DATEADD(DAY,-PPP.DAYS,PP.NIELSEN_END_DATE);
        
		
		MERGE INTO PR_PLAN_PROJECT_EPISODE PP 
			USING (
				SELECT PROJECT_ID,EPISODE_ID,ON_MAP_START_DATE,ON_MAP_END_DATE,DATEDIFF(DAYS,ON_MAP_START_DATE,ON_MAP_END_DATE) AS DAYS FROM PR_PLAN_PROJECT_EPISODE 
				WHERE PLAN_ID = :V_PLAN_ID AND PLAN_VERSION_ID = :V_PLAN_VERSION_ID -- AND OPTIMIZE_YN = 'Y'
			) PPP ON PP.PROJECT_ID  = PPP.PROJECT_ID AND PP.EPISODE_ID  = PPP.EPISODE_ID AND PP.PLAN_ID = :V_PLAN_ID 
			AND PP.PLAN_VERSION_ID = :V_PLAN_VERSION_ID -- AND PP.OPTIMIZE_YN = 'Y' and PP.ON_MAP_START_DATE > :V_NIELSEN_END_DATE
			AND PP.NIELSEN_START_DATE IS NULL
			WHEN MATCHED THEN 
		 		UPDATE SET PP.NIELSEN_START_DATE = DATEADD(DAY,-PPP.DAYS,PP.NIELSEN_END_DATE);



		LET Project_ID_Cursor CURSOR FOR 
			SELECT PPP.PROJECT_ID,1 AS EPISODE_ID,PPP.PLAN_ID,PPP.PLAN_VERSION_ID from PR_PLAN_PROJECT PPP
					INNER JOIN MODEL_EXEC ME ON PPP.PLAN_ID = ME.PLAN_ID 
						AND PPP.PLAN_VERSION_ID = ME.PLAN_VERSION_ID 
						AND PPP.OPTIMIZE_YN = 'N'
					where ME.MODEL_EXEC_ID = :V_MODEL_EXEC AND PPP.CAMPAIGN_GOAL_ID IS NULL
                    
			UNION
			-- EPISODIC
			Select PPP.PROJECT_ID,PPP.EPISODE_ID,PPP.PLAN_ID,PPP.PLAN_VERSION_ID from PR_PLAN_PROJECT_EPISODE PPP
				INNER JOIN MODEL_EXEC ME ON PPP.PLAN_ID = ME.PLAN_ID 
					AND PPP.PLAN_VERSION_ID = ME.PLAN_VERSION_ID 
					AND PPP.OPTIMIZE_YN = 'N'
				where ME.MODEL_EXEC_ID = :V_MODEL_EXEC AND PPP.CAMPAIGN_GOAL_ID IS NULL;

		OPEN Project_ID_Cursor;
		FOR ROW_VARIABLE IN Project_ID_Cursor DO 
		
			SET V_PROJECT_ID := ROW_VARIABLE.PROJECT_ID;
			SET V_EPISODE_ID := ROW_VARIABLE.EPISODE_ID;


			IF (:V_EPISODE_ID = 1) THEN  -- LAUNCH ONLY
					SELECT  MAX(COALESCE(PPP.CAMPAIGN_ID,0)), 
							MAX(COALESCE(PPP.CAMPAIGN_GOAL_ID,0))
							INTO :V_CAMPAIGN_ID, :V_CAMPAIGN_GOAL_ID
					FROM PR_PLAN_PROJECT PPP
					WHERE PPP.PLAN_ID = :V_PLAN_ID AND  PPP.PROJECT_ID = :V_PROJECT_ID;

					UPDATE PR_PLAN_PROJECT SET CAMPAIGN_ID = :V_CAMPAIGN_ID , CAMPAIGN_GOAL_ID = :V_CAMPAIGN_GOAL_ID 
					WHERE PLAN_ID = :V_PLAN_ID AND PLAN_VERSION_ID = :V_PLAN_VERSION_ID AND PROJECT_ID = :V_PROJECT_ID;
				
			ELSE 		-- EPISODIC
				SELECT  MAX(COALESCE(PPP.CAMPAIGN_ID,0)), 
						MAX(COALESCE(PPP.CAMPAIGN_GOAL_ID,0))
						INTO :V_CAMPAIGN_ID, :V_CAMPAIGN_GOAL_ID
				FROM PR_PLAN_PROJECT_EPISODE PPP
				WHERE PPP.PROJECT_ID = :V_PROJECT_ID AND PPP.EPISODE_ID = :V_EPISODE_ID AND PPP.PLAN_ID = :V_PLAN_ID;

				UPDATE PR_PLAN_PROJECT_EPISODE SET CAMPAIGN_ID = :V_CAMPAIGN_ID , CAMPAIGN_GOAL_ID = :V_CAMPAIGN_GOAL_ID 
				WHERE PROJECT_ID = :V_PROJECT_ID AND EPISODE_ID = :V_EPISODE_ID AND PLAN_ID = :V_PLAN_ID AND PLAN_VERSION_ID = :V_PLAN_VERSION_ID;
			
			END IF;

		END FOR;
		CLOSE Project_ID_Cursor;



		-- UPDATING PR_PLAN_PROJECT TABLE FOR SHOWING IN PROGRESS STATUS ON MAP ON THE MAP################################################################################
       
		MERGE INTO PR_PLAN_PROJECT PPP 
			USING (
				SELECT DISTINCT PE.PROJECT_ID, PE.PLAN_ID, PE.PLAN_VERSION_ID FROM PR_PLAN_PROJECT_EPISODE PE WHERE 
					PE.OPTIMIZE_YN = 'Y' AND
					PE.PLAN_ID = :V_PLAN_ID AND
					PE.PLAN_VERSION_ID = :V_PLAN_VERSION_ID 
					GROUP BY PE.PROJECT_ID, PE.PLAN_ID, PE.PLAN_VERSION_ID
				UNION 
					SELECT DISTINCT PE.PROJECT_ID, PE.PLAN_ID, PE.PLAN_VERSION_ID FROM PR_PLAN_PROJECT PE WHERE 
					PE.OPTIMIZE_YN = 'Y' AND
					PE.PLAN_ID = :V_PLAN_ID AND
					PE.PLAN_VERSION_ID = :V_PLAN_VERSION_ID
					GROUP BY PE.PROJECT_ID, PE.PLAN_ID, PE.PLAN_VERSION_ID
			) PEE ON PPP.PROJECT_ID = PEE.PROJECT_ID AND PPP.PLAN_ID = :V_PLAN_ID AND PPP.PLAN_VERSION_ID = :V_PLAN_VERSION_ID
		WHEN MATCHED THEN UPDATE SET PPP.STATUS_CD = 2;
		
    IF (:V_OPTIMIZATION_TYPE = 1) THEN
		
		INSERT INTO PR_MODEL_EXEC_PARAM (MODEL_EXEC_ID, PARAM_ID, VALUE) 
			VALUES (:V_MODEL_EXEC,1,3),(:V_MODEL_EXEC,2,1),(:V_MODEL_EXEC,12,0);
		
		INSERT INTO PR_MODEL_EXEC_PARAM (MODEL_EXEC_ID, PARAM_ID, VALUE) 
		SELECT :V_MODEL_EXEC, PARAM_ID, PARAM_VALUE FROM REF_MODEL_PARAM_COMPONENT P
				WHERE MEDIA_OUTLET_ID=:IN_MEDIA_OUTLET_ID and MODEL_TYPE_ID=1
		AND PARAM_ID NOT IN(1,2,12,27);
        
        INSERT INTO PR_MODEL_EXEC_PARAM (MODEL_EXEC_ID, PARAM_ID, VALUE) 
		SELECT :V_MODEL_EXEC, PARAM_ID, 20 AS PARAM_VALUE FROM REF_MODEL_PARAM_COMPONENT P
				WHERE MEDIA_OUTLET_ID=:IN_MEDIA_OUTLET_ID and MODEL_TYPE_ID=1
		AND PARAM_ID = 27 ;
        
	ELSE	
    	INSERT INTO PR_MODEL_EXEC_PARAM (MODEL_EXEC_ID, PARAM_ID, VALUE) 
			VALUES (:V_MODEL_EXEC,1,2);
    
		INSERT INTO PR_MODEL_EXEC_PARAM (MODEL_EXEC_ID, PARAM_ID, VALUE) 
		SELECT :V_MODEL_EXEC, PARAM_ID, PARAM_VALUE FROM REF_MODEL_PARAM_COMPONENT P
				WHERE MEDIA_OUTLET_ID=:IN_MEDIA_OUTLET_ID and MODEL_TYPE_ID=1
            AND PARAM_ID <> 1;
    END IF;


	SELECT PLAN_STATUS_ID INTO :V_PLAN_STATUS_S FROM REF_PLAN_STATUS WHERE CODE = 'S' limit 1;
    UPDATE PR_PLAN SET PLAN_STATUS_ID = :V_PLAN_STATUS_S, SCHEDULE_DT = CURRENT_TIMESTAMP() WHERE PLAN_ID = :V_PLAN_ID;

	RES := (SELECT :V_MODEL_EXEC AS MODEL_EXEC_ID);

    
RETURN 'SUCCESS';
END;
GRANT USAGE ON PROCEDURE PKG_PROMO_UI_OPTIMIZE_PLAN_SPOTS(INT,VARCHAR,INT,DATE,INT) TO ROLE RA_PROMO_DEV_QA_UAT_ACCESS;
GRANT USAGE ON PROCEDURE PKG_PROMO_UI_OPTIMIZE_PLAN_SPOTS(INT,VARCHAR,INT,DATE,INT) TO ROLE RA_PROMO_PROD_ACCESS;