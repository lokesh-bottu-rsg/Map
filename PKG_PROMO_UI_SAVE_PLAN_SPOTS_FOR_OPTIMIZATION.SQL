CREATE OR REPLACE PROCEDURE PKG_PROMO_UI_SAVE_PLAN_SPOTS_FOR_OPTIMIZATION(
    IN_PLAN_ID INT,
    IN_UID INT,
    IN_MEDIA_OUTLET_ID INT,
    IN_QTR VARCHAR(10),
    IN_MAP_NAME VARCHAR(100),
    IN_USER_ID INT,
    IN_OPTIMIZATION_TYPE INT,
    IN_PLAN_TYPE INT
)
RETURNS TABLE (V_PLAN_ID INT,V_MAX_PLAN_VERSION INT)
LANGUAGE SQL AS
DECLARE 
    V_PLAN_ID INT;
    V_PERIOD_ID INT;
    V_MAX_PLAN_VERSION INT;
    V_PROJ_ID INT;
    V_PROJECT_ID INT;
    V_EP_DTL VARCHAR;
    RES RESULTSET;
BEGIN

    SELECT PERIOD_ID INTO :V_PERIOD_ID FROM REF_CAL_PERIOD WHERE NAME=:IN_QTR AND PERIOD_TYPE_CD='Q';
    
    SELECT IFNULL(PLAN_ID,0) INTO :V_PLAN_ID FROM PR_PLAN WHERE MEDIA_OUTLET_ID=:IN_MEDIA_OUTLET_ID 
    AND PERIOD_ID=:V_PERIOD_ID AND PLAN_TYPE=:IN_PLAN_TYPE LIMIT 1;

    IF (:V_PLAN_ID > 0) THEN
		UPDATE PR_PLAN SET
			NAME = :IN_MAP_NAME,
			UPDATE_USER = :IN_USER_ID,
			UPDATE_DATE = CURRENT_TIMESTAMP() WHERE PLAN_ID = :V_PLAN_ID;
    ELSE

        INSERT INTO PR_PLAN (MEDIA_OUTLET_ID,NAME,COMMENTS,ACTIVE_YN,PLAN_STATUS_ID,PLAN_TYPE,CREATE_DT,
			CREATE_USER,DURATION_CD,SCHEDULE_DT,PERIOD_ID,UPDATE_USER,UPDATE_DATE) 
            VALUES (:IN_MEDIA_OUTLET_ID,:IN_MAP_NAME,NULL,'Y',0,:IN_PLAN_TYPE,
			CURRENT_TIMESTAMP(),:IN_USER_ID,'Q',NULL,:V_PERIOD_ID,:IN_USER_ID,CURRENT_TIMESTAMP());

        SELECT MAX(PLAN_ID) INTO :V_PLAN_ID FROM PR_PLAN;

        INSERT INTO MAP_OPTIMIZATION_HISTORY (PLAN_ID,PLAN_VERSION_ID,MODEL_EXEC_ID,
        PROJECT_ID,EPISODE_ID,PROC_NAME,DESCRIPTION,TIMESTAMP) 
        VALUES(:V_PLAN_ID,NULL,NULL,NULL,NULL,'PKG_PROMO_UI_SAVE_PLAN_SPOTS_FOR_OPTIMIZATION','NEW PLAN CREATED',CURRENT_TIMESTAMP());

    END IF;

    IF ((SELECT COUNT(1) FROM PR_PLAN_VERSION WHERE PLAN_ID = :V_PLAN_ID) = 0) THEN 
    
        SELECT IFNULL(MAX(PLAN_VERSION_ID),-1)+1 INTO :V_MAX_PLAN_VERSION FROM PR_PLAN_VERSION WHERE PLAN_ID=:V_PLAN_ID;

        INSERT INTO PR_PLAN_VERSION (PLAN_ID, PLAN_VERSION_ID, VERSION_NAME, OPTIMIZATION_TYPE, 
                ACTIVE_YN,CREATED_USER, CREATED_TS, UPDATED_USER, UPDATED_TS)
		VALUES (:V_PLAN_ID, :V_MAX_PLAN_VERSION, :IN_MAP_NAME, :IN_OPTIMIZATION_TYPE, 
                'Y', :IN_USER_ID, CURRENT_TIMESTAMP(), :IN_USER_ID, CURRENT_TIMESTAMP());

        -- CAPTURING LOGGING INFO 
        INSERT INTO MAP_OPTIMIZATION_HISTORY (PLAN_ID,PLAN_VERSION_ID,MODEL_EXEC_ID,
        PROJECT_ID,EPISODE_ID,PROC_NAME,DESCRIPTION,TIMESTAMP) 
        VALUES(:V_PLAN_ID,:V_MAX_PLAN_VERSION,NULL,NULL,NULL,'PKG_PROMO_UI_SAVE_PLAN_SPOTS_FOR_OPTIMIZATION','NEW PLAN VERSION CREATED',CURRENT_TIMESTAMP());
		
    
	ELSEIF ((SELECT PLAN_STATUS_ID FROM PR_PLAN WHERE PLAN_ID = :V_PLAN_ID) = 0) THEN
	        SELECT MAX(PLAN_VERSION_ID) INTO :V_MAX_PLAN_VERSION FROM PR_PLAN_VERSION WHERE PLAN_ID = :V_PLAN_ID;
            
            UPDATE PR_PLAN_VERSION SET OPTIMIZATION_TYPE= :IN_OPTIMIZATION_TYPE, 
            UPDATED_TS=CURRENT_TIMESTAMP() WHERE PLAN_ID=:V_PLAN_ID AND PLAN_VERSION_ID = :V_MAX_PLAN_VERSION;
	
    ELSEIF ((SELECT PLAN_STATUS_ID FROM PR_PLAN WHERE PLAN_ID = :V_PLAN_ID) = 7) THEN
	        SELECT MAX(PLAN_VERSION_ID) INTO :V_MAX_PLAN_VERSION FROM PR_PLAN_VERSION WHERE PLAN_ID=:V_PLAN_ID;
            
            UPDATE PR_PLAN_VERSION SET OPTIMIZATION_TYPE=:IN_OPTIMIZATION_TYPE, 
            UPDATED_TS=CURRENT_TIMESTAMP() WHERE PLAN_ID=:V_PLAN_ID AND PLAN_VERSION_ID=:V_MAX_PLAN_VERSION;
	
    ELSE
		SELECT IFNULL(MAX(PLAN_VERSION_ID),-1)+1 INTO :V_MAX_PLAN_VERSION FROM PR_PLAN_VERSION WHERE PLAN_ID=:V_PLAN_ID;
        
		INSERT INTO PR_PLAN_VERSION (PLAN_ID, PLAN_VERSION_ID, VERSION_NAME, 
                OPTIMIZATION_TYPE, ACTIVE_YN,CREATED_USER, CREATED_TS, UPDATED_USER, UPDATED_TS)
        VALUES (:V_PLAN_ID, :V_MAX_PLAN_VERSION, :IN_MAP_NAME, 
                :IN_OPTIMIZATION_TYPE, 'Y', :IN_USER_ID, CURRENT_TIMESTAMP(), :IN_USER_ID,CURRENT_TIMESTAMP());
                
        UPDATE PR_PLAN SET PLAN_STATUS_ID=0 WHERE PLAN_ID=:V_PLAN_ID;
        
        --  CAPTURING LOGGING INFO --
        INSERT INTO MAP_OPTIMIZATION_HISTORY (PLAN_ID,PLAN_VERSION_ID,MODEL_EXEC_ID,
        PROJECT_ID,EPISODE_ID,PROC_NAME,DESCRIPTION,TIMESTAMP) 
        VALUES(:V_PLAN_ID,:V_MAX_PLAN_VERSION,NULL,NULL,NULL,'PKG_PROMO_UI_SAVE_PLAN_SPOTS_FOR_OPTIMIZATION','NEW PLAN VERSION CREATED',CURRENT_TIMESTAMP());

    END IF;

    DELETE FROM PR_PLAN_PROJECT WHERE PLAN_ID = :V_PLAN_ID AND PLAN_VERSION_ID = :V_MAX_PLAN_VERSION;

    MERGE INTO PR_PLAN_PROJECT T
    USING (

            SELECT :V_PLAN_ID PLAN_ID,:V_MAX_PLAN_VERSION PLAN_VERSION_ID,STG.PROJECT_ID,STG.TARGET_REACH,STG.TARGET_GRP,
            STG.PLANNED_SPOTS,STG.GUIDE_REACH_PCT,STG.GUIDE_GRP,         
            STG.GUIDE_SPOTS,STG.OPTIMIZE_YN,STG.IS_DIRTY_PROJECT,
            CASE WHEN STG.OPTIMIZE_YN ='Y' THEN CURRENT_TIMESTAMP() ELSE IFNULL(PPP.UPDATE_TS,CURRENT_TIMESTAMP()) END UPDATE_TS,
            STG.DISPLAY_SEQ,
            CASE WHEN STG.OPTIMIZE_YN ='Y' THEN 11 
                WHEN STG.IS_DIRTY_PROJECT ='Y' then 11 
                WHEN STG.STATUS_CD IS null then 12 
                ELSE STG.STATUS_CD END STATUS_CD,
            STG.USER_COMMENT,STG.NETWORK_TARGET_DEMO_ID,STG.PRIORITY,STG.CLUSTER_ID,
            CASE 
                WHEN STG.CLUSTER_ID >= 1 AND STG.SEGMENT IS NULL THEN -- ADDED THIS EXTRA CONDITION TO HANDLE SEGMENT FOR ANE 
                (
                    SELECT RS.SEGMENT_ID FROM REF_SEGMENT RS JOIN STG_PR_PLAN_PROJECT STG  ON RS.SEGMENT_AIRBYTE = STG.SEGMENT_AIRBYTE
                    AND RS.SEGMENT_TYPE_ID = CASE WHEN STG.SEGMENT_AIRBYTE=31 THEN 3 
                    WHEN STG.SEGMENT_AIRBYTE=480 THEN 3 ELSE STG.SEGMENT_TYPE END LIMIT 1
                )
                ELSE STG.SEGMENT END AS SEGMENT,
            STG.SEGMENT_TYPE,STG.SEGMENT_AIRBYTE,STG.FREQUENCY,STG.ON_MAP_DEMO,STG.ON_MAP_START_DATE,
            STG.ON_MAP_END_DATE,STG.PHASE_TYPE,STG.EPISODE_PRIORITY,STG.NO_OF_EPISODE,STG.ON_MAP_PREMIER_DATE,
            STG.ON_MAP_START_DATE_TS,STG.ON_MAP_END_DATE_TS
            FROM STG_PR_PLAN_PROJECT STG 
            LEFT JOIN (
                    SELECT  PROJECT_ID, UPDATE_TS FROM PR_PLAN_PROJECT PPP WHERE PLAN_ID = :V_PLAN_ID AND
                    PLAN_VERSION_ID = :V_MAX_PLAN_VERSION-1 
                    ) PPP
                ON PPP.PROJECT_ID = STG.PROJECT_ID        
                WHERE STG.UID=:IN_UID
    
            ) S
        ON S.PLAN_ID = T.PLAN_ID  AND S.PLAN_VERSION_ID = T.PLAN_VERSION_ID AND S.PROJECT_ID = T.PROJECT_ID 
        
        WHEN NOT MATCHED THEN    
            INSERT (PLAN_ID, PLAN_VERSION_ID, PROJECT_ID, MAX_SPOTS_DAYPART, TARGET_REACH_PCT,
            TARGET_GRP,PLANNED_SPOTS,GUIDE_REACH_PCT, GUIDE_GRP, 
            GUIDE_SPOTS, OPTIMIZE_YN,IS_DIRTY_PROJECT,CREATE_USER,CREATE_TS, UPDATE_USER, 
            UPDATE_TS, DISPLAY_SEQ,STATUS_CD,USER_COMMENT,NETWORK_TARGET_DEMO_ID,PROJ_PRIORITY,
            CLUSTER_ID,SEGMENT,SEGMENT_TYPE,SEGMENT_AIRBYTE,FREQUENCY,ON_MAP_DEMO,ON_MAP_START_DATE,
            ON_MAP_END_DATE,PHASE_TYPE,EPISODE_PRIORITY,NO_OF_EPISODE,ON_MAP_PREMIER_DATE,ON_MAP_START_DATE_TS,ON_MAP_END_DATE_TS)
            
            VALUES
            
            (S.PLAN_ID,S.PLAN_VERSION_ID,S.PROJECT_ID,NULL,S.TARGET_REACH,TARGET_GRP,S.PLANNED_SPOTS,
            S.GUIDE_REACH_PCT,S.GUIDE_GRP,S.GUIDE_SPOTS,S.OPTIMIZE_YN,S.IS_DIRTY_PROJECT,:IN_USER_ID,
            CURRENT_TIMESTAMP() ,:IN_USER_ID, 
            S.UPDATE_TS,S.DISPLAY_SEQ,S.STATUS_CD,S.USER_COMMENT,S.NETWORK_TARGET_DEMO_ID,S.PRIORITY,S.CLUSTER_ID,
            S.SEGMENT,S.SEGMENT_TYPE,S.SEGMENT_AIRBYTE,S.FREQUENCY,S.ON_MAP_DEMO,S.ON_MAP_START_DATE,
            S.ON_MAP_END_DATE,S.PHASE_TYPE,S.EPISODE_PRIORITY,S.NO_OF_EPISODE,S.ON_MAP_PREMIER_DATE,
            S.ON_MAP_START_DATE_TS,S.ON_MAP_END_DATE_TS)
            
        WHEN MATCHED THEN 
        
            UPDATE SET
                TARGET_REACH_PCT=S.TARGET_REACH,
                TARGET_GRP=S.TARGET_GRP,
                PLANNED_SPOTS=S.PLANNED_SPOTS,
                GUIDE_REACH_PCT=S.GUIDE_REACH_PCT,
                GUIDE_GRP=S.GUIDE_GRP,
                GUIDE_SPOTS=S.GUIDE_SPOTS,
                OPTIMIZE_YN=S.OPTIMIZE_YN,
                IS_DIRTY_PROJECT=S.IS_DIRTY_PROJECT,
                CREATE_USER= :IN_USER_ID,
                CREATE_TS= CURRENT_TIMESTAMP(),
                NETWORK_TARGET_DEMO_ID = S.NETWORK_TARGET_DEMO_ID,
                UPDATE_USER=:IN_USER_ID,
                UPDATE_TS=S.UPDATE_TS,
                DISPLAY_SEQ=S.DISPLAY_SEQ,
                PROJ_PRIORITY=S.PRIORITY,
                CLUSTER_ID=S.CLUSTER_ID,
                SEGMENT = S.SEGMENT,
                SEGMENT_TYPE = S.SEGMENT_TYPE,
                SEGMENT_AIRBYTE = S.SEGMENT_AIRBYTE,
                FREQUENCY = S.FREQUENCY,
                ON_MAP_DEMO = S.ON_MAP_DEMO,
                ON_MAP_START_DATE = S.ON_MAP_START_DATE,
                ON_MAP_END_DATE = S.ON_MAP_END_DATE,
                PHASE_TYPE=S.PHASE_TYPE,
                EPISODE_PRIORITY=S.EPISODE_PRIORITY,
                NO_OF_EPISODE=S.NO_OF_EPISODE,
                ON_MAP_PREMIER_DATE = S.ON_MAP_PREMIER_DATE,
                ON_MAP_START_DATE_TS = S.ON_MAP_START_DATE_TS,
                ON_MAP_END_DATE_TS = S.ON_MAP_END_DATE_TS;


    DELETE FROM PR_PLAN_PROJECT_SPOTS WHERE PLAN_ID =:V_PLAN_ID AND PLAN_VERSION_ID = :V_MAX_PLAN_VERSION;
    
    MERGE INTO PR_PLAN_PROJECT_SPOTS T
    USING (
        SELECT :V_PLAN_ID PLAN_ID,:V_MAX_PLAN_VERSION PLAN_VERSION_ID,STG.PROJECT_ID,STG.WEEK_DATE,STG.UNIT_COUNT,
        FROM STG_PR_PLAN_PROJECT_SPOTS STG where STG.UID=:IN_UID
        ) S
        ON S.PLAN_ID = T.PLAN_ID AND S.PLAN_VERSION_ID = T.PLAN_VERSION_ID AND S.PROJECT_ID = T.PROJECT_ID 
        AND S.WEEK_DATE = T.WEEK_DATE
    
    WHEN NOT MATCHED THEN 

        INSERT (PLAN_ID, PLAN_VERSION_ID, PROJECT_ID, WEEK_DATE, UNIT_COUNT,OPT_UNIT_COUNT, 
                CREATE_USER, CREATE_TS, UPDATE_USER, UPDATE_TS ) VALUES
        (S.PLAN_ID,S.PLAN_VERSION_ID,S.PROJECT_ID, S.WEEK_DATE,S.UNIT_COUNT,NULL,:IN_USER_ID,CURRENT_TIMESTAMP(),
        :IN_USER_ID,CURRENT_TIMESTAMP())

    WHEN MATCHED THEN 
        UPDATE SET 
		UNIT_COUNT= S.UNIT_COUNT,
        CREATE_USER =:IN_USER_ID, 
		CREATE_TS=CURRENT_TIMESTAMP(), 
        UPDATE_USER=:IN_USER_ID, 
		UPDATE_TS=CURRENT_TIMESTAMP();

    UPDATE PR_PROJECT PP 
    SET PP.TARGET_REACH = CASE WHEN (IFNULL(PPP.TARGET_REACH,0)=0 AND PPP.PLANNED_SPOTS>0 AND IFNULL(PP.TARGET_GRP,0)=0) 
            THEN PPP.GUIDE_REACH_PCT ELSE PPP.TARGET_REACH END,
        PP.TARGET_GRP=PPP.TARGET_GRP,
        PP.PRIORITY=PPP.PRIORITY
    FROM STG_PR_PLAN_PROJECT PPP WHERE PPP.UID=:IN_UID AND PP.PROJECT_ID=PPP.PROJECT_ID 
    AND PP.MEDIA_OUTLET_ID=:IN_MEDIA_OUTLET_ID; 
   

    UPDATE PR_PLAN SET PLAN_STATUS_ID=0, COMMENTS = NULL, UPDATE_DATE=CURRENT_TIMESTAMP(),
            NAME = CASE WHEN POSITION('-v', :IN_MAP_NAME,1) > 0 THEN 
                CONCAT(LEFT(:IN_MAP_NAME,POSITION('-v', :IN_MAP_NAME,1)-1),'-v',:V_MAX_PLAN_VERSION+1)
			ELSE CONCAT(:IN_MAP_NAME,'-v',:V_MAX_PLAN_VERSION+1) END
	WHERE PLAN_ID = :V_PLAN_ID; 


    DROP TABLE IF EXISTS TMP_PROJECT;
    
    CREATE TEMPORARY TABLE TMP_PROJECT AS 
		SELECT PROJECT_ID, CAMPAIGN_GOAL_ID FROM PR_PLAN_PROJECT WHERE PLAN_ID = :V_PLAN_ID  
        AND PLAN_VERSION_ID = :V_MAX_PLAN_VERSION-1 
		AND PROJECT_ID NOT IN ( SELECT PROJECT_ID FROM PR_PLAN_PROJECT WHERE PLAN_ID = :V_PLAN_ID 
                                AND PLAN_VERSION_ID = :V_MAX_PLAN_VERSION)
        AND IS_ACTIVE='Y';

    
		
    DROP TABLE IF EXISTS TMP_PROJECT_EPISODE;
    
    CREATE TEMPORARY TABLE TMP_PROJECT_EPISODE AS 
        SELECT PROJECT_ID, CAMPAIGN_GOAL_ID FROM PR_PLAN_PROJECT_EPISODE WHERE PLAN_ID = :V_PLAN_ID  
        AND PLAN_VERSION_ID = :V_MAX_PLAN_VERSION-1 
        AND PROJECT_ID NOT IN (SELECT PROJECT_ID FROM PR_PLAN_PROJECT WHERE PLAN_ID = :V_PLAN_ID 
                            AND PLAN_VERSION_ID = :V_MAX_PLAN_VERSION)
        AND IS_ACTIVE='Y';

        
    DELETE FROM PR_PLAN_SCHEDULE_EPISODE 
    WHERE PROJECT_ID IN (SELECT DISTINCT PROJECT_ID FROM TMP_PROJECT_EPISODE) AND MEDIA_OUTLET_ID=:IN_MEDIA_OUTLET_ID;

    DELETE FROM PR_PROJECT_REACH_EPISODE WHERE REACH_TYPE = 'PLANNED' AND ChannelCode=:IN_MEDIA_OUTLET_ID
    AND PROJECT_ID IN (SELECT DISTINCT PROJECT_ID FROM TMP_PROJECT);

    DELETE FROM PR_PROJECT_REACH WHERE REACH_TYPE = 'PLANNED' AND ChannelCode=:IN_MEDIA_OUTLET_ID
    AND PROJECT_ID IN (SELECT DISTINCT PROJECT_ID FROM TMP_PROJECT);

    DELETE FROM PR_CAMPAIGN_GOAL WHERE MEDIA_OUTLET_ID=:IN_MEDIA_OUTLET_ID 
    AND PROJECT_ID IN (SELECT DISTINCT PROJECT_ID FROM TMP_PROJECT);
    
    DELETE FROM PR_CAMPAIGN_GOAL_EPISODE WHERE MEDIA_OUTLET_ID=:IN_MEDIA_OUTLET_ID 
    AND PROJECT_ID in (SELECT DISTINCT PROJECT_ID FROM TMP_PROJECT);

    UPDATE PR_PLAN_PROJECT SET IS_ACTIVE='N' WHERE PLAN_ID = :V_PLAN_ID AND PROJECT_ID IN (SELECT PROJECT_ID FROM TMP_PROJECT);


    DROP TABLE IF EXISTS TMP_PROJECT1;
    CREATE TEMPORARY TABLE TMP_PROJECT1 AS 
	   SELECT PROJECT_ID,PROJ_GRP,PROJ_REACH_PERCENT
        FROM PR_PLAN_PROJECT WHERE PLAN_ID = :V_PLAN_ID  AND PLAN_VERSION_ID = :V_MAX_PLAN_VERSION-1;


    UPDATE PR_PLAN_PROJECT PP SET PP.PROJ_GRP = T.PROJ_GRP,PP.PROJ_REACH_PERCENT=T.PROJ_REACH_PERCENT
    FROM TMP_PROJECT1 T WHERE PP.PROJECT_ID = T.PROJECT_ID
	AND PLAN_ID= :V_PLAN_ID and PP.PLAN_VERSION_ID= :V_MAX_PLAN_VERSION;

    
    INSERT INTO MAP_OPTIMIZATION_HISTORY (PLAN_ID,PLAN_VERSION_ID,MODEL_EXEC_ID,PROJECT_ID,EPISODE_ID,PROC_NAME,DESCRIPTION,TIMESTAMP) 
        SELECT :V_PLAN_ID,:V_MAX_PLAN_VERSION,NULL MODEL_EXEC_ID,:V_PROJ_ID,NULL EPISODE_ID,'PKG_PROMO_UI_SAVE_PLAN_SPOTS_FOR_OPTIMIZATION',
            'SPOTS REMOVED FOR DELETED PROJECT FROM A PLAN',CURRENT_TIMESTAMP() FROM TMP_PROJECT
        UNION 
        SELECT :V_PLAN_ID,:V_MAX_PLAN_VERSION,NULL MODEL_EXEC_ID,:V_PROJ_ID,NULL EPISODE_ID,
            'PKG_PROMO_UI_SAVE_PLAN_SPOTS_FOR_OPTIMIZATION', 'REACH DATA REMOVED FOR DELETED PROJECT FROM A PLAN',CURRENT_TIMESTAMP() FROM TMP_PROJECT;

    UPDATE PR_PROJECT PP 
        SET PP.PLAN_ID=
            CASE WHEN PP.PLAN_ID = :V_PLAN_ID THEN NULL ELSE PP.PLAN_ID END 
            WHERE PROJECT_ID IN 
			(
				SELECT PROJECT_ID FROM PR_PLAN_PROJECT WHERE PLAN_ID = :V_PLAN_ID AND PLAN_VERSION_ID = :V_MAX_PLAN_VERSION-1 
                AND PROJECT_ID NOT IN
                (
					SELECT PROJECT_ID FROM PR_PLAN_PROJECT WHERE PLAN_ID = :V_PLAN_ID AND PLAN_VERSION_ID = :V_MAX_PLAN_VERSION
				)
			) AND PP.MEDIA_OUTLET_ID= :IN_MEDIA_OUTLET_ID;
    DELETE FROM PR_PLAN_PROJECT WHERE PROJECT_ID IN (SELECT PROJECT_ID FROM TMP_PROJECT) AND PLAN_ID= :V_PLAN_ID 
    AND PLAN_VERSION_ID = :V_MAX_PLAN_VERSION-1;
    
    DELETE FROM PR_PLAN_PROJECT_SPOTS WHERE PROJECT_ID IN (SELECT PROJECT_ID FROM TMP_PROJECT) 
    AND PLAN_ID= :V_PLAN_ID AND PLAN_VERSION_ID= :V_MAX_PLAN_VERSION-1;
            
    DROP TABLE TMP_PROJECT;

    DELETE FROM PR_PLAN_PROJECT_EPISODE_JSON WHERE  PLAN_ID=:V_PLAN_ID AND PLAN_VERSION_ID=:V_MAX_PLAN_VERSION;
    INSERT INTO PR_PLAN_PROJECT_EPISODE_JSON
        SELECT :V_PLAN_ID,:V_MAX_PLAN_VERSION,STG.PROJECT_ID, EPISODE_DTL_JSON
        FROM STG_PR_PLAN_PROJECT STG where STG.UID=:IN_UID;

    CREATE OR REPLACE TEMPORARY TABLE TMP_PR_PLAN_PROJECT_EPISODE
			(
				PROJECT_ID INT, EPISODE_NUM INT, TARGET_GRP FLOAT, TARGET_SPOTS INT,
				START_DATE DATE, END_DATE DATE, EPISODE_START_TS TIMESTAMP_TZ,CHKSELECT BOOLEAN
			);

    CREATE OR REPLACE TEMPORARY TABLE TMP_PR_PLAN_PROJECT_EPISODE_JSON AS  SELECT * FROM PR_PLAN_PROJECT_EPISODE_JSON 
        WHERE PLAN_ID=:V_PLAN_ID AND PLAN_VERSION_ID=:V_MAX_PLAN_VERSION; 
    LET C2 CURSOR FOR SELECT PROJECT_ID,EPISODE_DTL_JSON FROM TMP_PR_PLAN_PROJECT_EPISODE_JSON;
    OPEN C2;
    FOR ROW_VARIABLE IN C2 DO 
    
        SET V_PROJECT_ID := ROW_VARIABLE.PROJECT_ID;
        SET V_EP_DTL := ROW_VARIABLE.EPISODE_DTL_JSON;

        INSERT INTO TMP_PR_PLAN_PROJECT_EPISODE 
        SELECT 
            A.VALUE:PROJECT_ID::INT PROJECT_ID,
            A.VALUE:EPISODE_NUM::INT EPISODE_NUM,
            A.VALUE:TARGET_GRP::FLOAT TARGET_GRP,
            A.VALUE:TARGET_SPOT::INT TARGET_SPOTS,
            A.VALUE:START_TS::TIMESTAMP_TZ START_DATE,
            A.VALUE:END_TS::TIMESTAMP_TZ END_DATE,
            A.VALUE:EPISODE_START_TS::TIMESTAMP_TZ EPISODE_START_TS,
            A.VALUE:chkSelectRow::BOOLEAN CHKSELECT
        FROM LATERAL FLATTEN(input => PARSE_JSON(:V_EP_DTL)) AS A WHERE CHKSELECT = TRUE;

    END FOR;
    CLOSE C2;

    DELETE FROM PR_PLAN_PROJECT_EPISODE WHERE PLAN_ID=:V_PLAN_ID AND PLAN_VERSION_ID=:V_MAX_PLAN_VERSION;
    
    INSERT INTO PR_PLAN_PROJECT_EPISODE (
        PROJECT_ID,EPISODE_ID,PLAN_ID,PLAN_VERSION_ID,TGT_SPOTS,TARGET_GRP,
        EPISODE_START_TS,OPTIMIZE_YN,IS_DIRTY_PROJECT,CAMPAIGN_ID,CAMPAIGN_GOAL_ID,IS_ACTIVE,STATUS_CD,
        PROJ_GRP,PROJ_REACH_PERCENT,PROJ_PRIORITY,CLUSTER_ID,SEGMENT,FREQUENCY,ON_MAP_DEMO,
        ON_MAP_START_DATE,ON_MAP_END_DATE,CREATED_USER,CREATED_TS,UPDATED_USER,UPDATED_TS )
    
    SELECT PPP.PROJECT_ID, EPIC.EPISODE_NUM, :V_PLAN_ID, :V_MAX_PLAN_VERSION, 
    EPIC.TARGET_SPOTS, EPIC.TARGET_GRP,EPIC.EPISODE_START_TS,PPP.OPTIMIZE_YN,PPP.IS_DIRTY_PROJECT, NULL, NULL, 
    PPP.IS_ACTIVE, 10, NULL, NULL, PPP.EPISODE_PRIORITY, PPP.CLUSTER_ID, PPP.SEGMENT,PPP.FREQUENCY, PPP.ON_MAP_DEMO, 
    EPIC.START_DATE, EPIC.END_DATE, :IN_USER_ID, CURRENT_TIMESTAMP(), PPP.UPDATE_USER, PPP.UPDATE_TS
    FROM TMP_PR_PLAN_PROJECT_EPISODE EPIC
    INNER JOIN PR_PLAN_PROJECT PPP ON EPIC.PROJECT_ID=PPP.PROJECT_ID 
    AND PPP.PLAN_ID=:V_PLAN_ID AND PPP.PLAN_VERSION_ID=:V_MAX_PLAN_VERSION;
    
        
    DELETE FROM PR_PLAN_PROJECT_SPOTS_EPISODE WHERE PLAN_ID=:V_PLAN_ID AND PLAN_VERSION_ID=:V_MAX_PLAN_VERSION;
    
    INSERT INTO PR_PLAN_PROJECT_SPOTS_EPISODE(
        PROJECT_ID,EPISODE_ID,PLAN_ID,PLAN_VERSION_ID,WEEK_DATE,UNIT_COUNT,
        CREATED_USER,CREATED_TS,UPDATED_USER,UPDATED_TS
    )		
    SELECT EPIC.PROJECT_ID, EPIC.EPISODE_NUM, :V_PLAN_ID, :V_MAX_PLAN_VERSION, PKG_GET_MONDAYS_DATE(EPIC.START_DATE), 
    CASE WHEN EPIC.TARGET_GRP IS NULL then EPIC.TARGET_SPOTS ELSE EPIC.TARGET_GRP END, 
    :IN_USER_ID, CURRENT_TIMESTAMP(), :IN_USER_ID, CURRENT_TIMESTAMP()
    FROM TMP_PR_PLAN_PROJECT_EPISODE EPIC;

    
    UPDATE PR_PLAN_PROJECT SET OPTIMIZE_YN = 'N' WHERE PLAN_ID=:V_PLAN_ID 
    AND PLAN_VERSION_ID=:V_MAX_PLAN_VERSION AND PHASE_TYPE = 2 ;

    UPDATE PR_PLAN_PROJECT SET OPTIMIZE_YN = 'N' WHERE PLAN_ID= :V_PLAN_ID 
    AND PLAN_VERSION_ID= :V_MAX_PLAN_VERSION AND PHASE_TYPE IN (1,3) 
    AND ON_MAP_END_DATE <= CURRENT_DATE();

    MERGE INTO PR_PLAN_PROJECT_SPOTS_EPISODE_MAP T
    USING (
        SELECT 
            STG.PROJECT_ID, STG.EPISODE_ID, :V_PLAN_ID PLAN_ID, :V_MAX_PLAN_VERSION PLAN_VERSION_ID,
            STG.WEEK_DATE, STG.UNIT_COUNT, STG.EPISODE_START_DATE, STG.EPISODE_END_DATE, 
            STG.BROADCAST_DATE, STG.EPISODE_START_TS
        FROM STG_PR_PLAN_PROJECT_SPOTS_EPISODE_MAP STG 
        WHERE STG.UID = :IN_UID 
        AND STG.UNIT_COUNT > 0
    ) S 
    ON S.PROJECT_ID = T.PROJECT_ID 
    AND S.EPISODE_ID = T.EPISODE_ID 
    AND S.PLAN_ID = T.PLAN_ID 
    AND S.PLAN_VERSION_ID = T.PLAN_VERSION_ID 
    AND S.WEEK_DATE = T.WEEK_DATE
    WHEN NOT MATCHED THEN 
        INSERT (
            PROJECT_ID, EPISODE_ID, PLAN_ID, PLAN_VERSION_ID, WEEK_DATE, UNIT_COUNT, 
            EPISODE_START_DATE, EPISODE_END_DATE, BROADCAST_DATE, EPISODE_START_TS, CREATE_TS, CREATE_USER
        )
        VALUES (
            S.PROJECT_ID, S.EPISODE_ID, S.PLAN_ID, S.PLAN_VERSION_ID, S.WEEK_DATE, S.UNIT_COUNT, 
            S.EPISODE_START_DATE, S.EPISODE_END_DATE, S.BROADCAST_DATE, S.EPISODE_START_TS, 
            CURRENT_TIMESTAMP(), :IN_USER_ID
        )
    
  WHEN MATCHED THEN 
      UPDATE SET UNIT_COUNT=S.UNIT_COUNT,
          EPISODE_START_DATE=S.EPISODE_START_DATE,
        EPISODE_END_DATE=S.EPISODE_END_DATE,
        BROADCAST_DATE=S.BROADCAST_DATE,
        EPISODE_START_TS=S.EPISODE_START_TS,
        CREATE_TS= CURRENT_TIMESTAMP(), 
        CREATE_USER= :IN_USER_ID;
            
    RES := (SELECT :V_PLAN_ID V_PLAN_ID,:V_MAX_PLAN_VERSION V_MAX_PLAN_VERSION);

RETURN TABLE(RES);
END;

GRANT USAGE ON PROCEDURE PKG_PROMO_UI_SAVE_PLAN_SPOTS_FOR_OPTIMIZATION(INT,INT,INT,VARCHAR,VARCHAR,INT,INT,INT) TO ROLE RA_PROMO_DEV_QA_UAT_ACCESS;
GRANT USAGE ON PROCEDURE PKG_PROMO_UI_SAVE_PLAN_SPOTS_FOR_OPTIMIZATION(INT,INT,INT,VARCHAR,VARCHAR,INT,INT,INT) TO ROLE RA_PROMO_PROD_ACCESS;